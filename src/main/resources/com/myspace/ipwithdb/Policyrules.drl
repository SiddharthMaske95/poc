package com.myspace.insurancepolicyrulestoringresponse;

/////////////////
/*
rule "UniqID"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance($H:id  )
	then
	$D.setStatusunique_ID($H) ;
end
*/







rule "AnnualIncome"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance($H:300000 ,annual_income>=$H  )
	then
	$D.setStatusAnnualIncome("Pass") ;
end

rule "AnnualIncomeFail"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance($H:300000,annual_income<$H  )
	then
	$D.setStatusAnnualIncome("Fail");

end

rule "Age"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance(age>=18)
	then
	$D.setStatusAge("Pass");
end

rule "AgeF"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance(age<18)
	then
	$D.setStatusAge("Fail");
end


rule "Occupation"
  dialect "mvel"
  ruleflow-group "policy"
  when
  	$D:Insurance(occupation.equals("salaried") || occupation.equals("self salaried") ||  occupation.equals("Salaried")  || occupation.equals("Self Employeed")    )
	then
	$D.setStatusOccupation("Pass");
end

rule "OccupationF"
  dialect "mvel"
  ruleflow-group "policy"
  when
  	$D:Insurance(occupation.equals("agriculture") || occupation.equals("retired")  || occupation.equals("unemployeed")  || occupation.equals("Unemployeed")  )
	then
	$D.setStatusOccupation("Fail");
end


rule "PremiumAmount"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance($K:premium_amount, $K<=(annual_income*0.2)	)
	then
	$D.setStatusPremiumAmount("Pass");
end

rule "PremiumAmountF"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance($K:premium_amount, $K>(annual_income*0.2)	)
	then
	$D.setStatusPremiumAmount("Fail");
end

rule "medicalhistory"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance(medical_history.equals("fever") ||  medical_history.equals("dry cough") || medical_history.equals("sore trout") || medical_history.equals("thyroid")  || medical_history.equals("Fever") ||  medical_history.equals("Dry cough") || medical_history.equals("Sore trout") || medical_history.equals("Thyroid")  	)
	then
	$D.setStatusMedical_History("Pass");
end

rule "medicalhistoryF"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance(medical_history.equals("Breathing difficulties") || medical_history.equals("breathing difficulties") ||  medical_history.equals("diarrhea") || medical_history.equals("heart attack") || medical_history.equals("blood pressure") || medical_history.equals("cancer") || medical_history.equals("Diarrhea") || medical_history.equals("Heart attack") || medical_history.equals("Blood pressure") || medical_history.equals("Cancer")	)/////// update
	then
	$D.setStatusMedical_History("Fail");

end

/*
rule "FinalStatus"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance1(medical_status=="Pass" ||  age_status=="Pass" ||  annual_income_status=="Pass" ||
	occupation_status=="Pass" || premium_status=="Pass" )/////// update
	then
	$D.setFinalstatus("Pass");

end

rule "FinalStatusF"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance1(medical_status=="Fail" ||  age_status=="Fail" || annual_income_status=="Fail" ||
	occupation_status=="Fail" || premium_status=="Fail" ) /////// update
	then
	$D.setFinalstatus("Fail");

end


/////////////////////////////// new rule  end ///////////////////////////////
/*
 rule "Nationality"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance(nationality=="Indian" )
	then
	$D.setStatusNationality("Pass")
end

rule "NRI/PIO"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance(nationality=="NRI" || nationality=="PIO"  )
	then
	$D.setStatusNationality("Nationality Fail")
	System.out.println("Nationality Fail");
end



rule "Education"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance(education=="10th Pass" ||  education=="12th Pass" || education=="Diploma" || education=="Graduate"  
	 ||  education=="Post Graduate" || education=="Post Graduate and Above"	)
	then
	$D.setStatusEducation("Pass")
end

rule "EducationF"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance(education=="Uneducated" ||  education=="Other" || education=="Illiterate" || education=="Below 10th"  	)
	then
	$D.setStatusEducation("Education Fail")
	
end

rule "Nominee"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance(nominee=="Father" || nominee=="Husband" || nominee=="Mother" || nominee=="Spouse" || nominee=="Wife" || nominee=="Son" || nominee=="Daughter"
	|| nominee=="Grand Daughter" || nominee=="Grand Son" )
	then
	$D.setStatusNominee("Pass")
end

rule "NomineeF"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance(nominee=="Other" )
	then
	$D.setStatusNominee("Fail In nominee")
end

rule "Channel"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance(channel=="BANCA" || channel=="BANCA NORTH and SOUTH" || channel=="Bancassurance"
	|| channel=="Bancassurance-BOB" || channel=="Bancassurance-UBI"  )
	then
	$D.setStatusChannel("Pass")
end

rule "ChannelF"
	dialect "mvel"
	ruleflow-group "policy"
	when
	$D:Insurance(channel=="NON BANCA" || channel=="BOB" || channel=="Digital" || channel=="ER" || channel=="RRB"  )
	then
	$D.setStatusChannel("Fail in Channel")
end


    ////////////////////

/*
rule "AnnualIncome"
	dialect "mvel"
//	ruleflow-group "check"
	when
	$D:Insurance($H:100000 ,annualIncome>=$H  )
	then
	$D.setStatusAnnualIncome("Pass")
end

rule "AnnualIncomeFail"
	dialect "mvel"
//	ruleflow-group "check"
	when
	$D:Insurance($H:100000,annualIncome<$H  )
	then
	$D.setStatusAnnualIncome("Annual Income fail")
	System.out.println("Annual Income Fail");
end



rule "PremiumAmount"
	dialect "mvel"
//	ruleflow-group "check"
	when
	$D:Insurance($K:premiumAmount, $K<=(annualIncome*50/100)	)
	then
	$D.setStatusPremiumAmount("Pass")
end

rule "PremiumAmountF"
	dialect "mvel"
//	ruleflow-group "check"
	when
	$D:Insurance($K:premiumAmount, $K>(annualIncome*50/100)	)
	then
	$D.setStatusPremiumAmount("Fail in  PremiumAmount")
end


rule "Age"
	dialect "mvel"
//	ruleflow-group "check"
	when
	$D:Insurance(age>=17 ||	age>=18 || age<=55)
	then
	$D.setStatusAge("Pass")
end

rule "AgeF"
	dialect "mvel"
//	ruleflow-group "check"
	when
	$D:Insurance(age<17 || age>=55)
	then
	$D.setStatusAge("Fail in Age")
end


 rule "Nationality"
	dialect "mvel"
//	ruleflow-group "check1"
	when
	$D:Insurance(nationality=="Indian" )
	then
	$D.setStatusNationality("Pass")
end

rule "NRI/PIO"
	dialect "mvel"
//	ruleflow-group "check1"
	when
	$D:Insurance(nationality=="NRI" || nationality=="PIO"  )
	then
	$D.setStatusNationality("Nationality Fail")
	System.out.println("Nationality Fail");
end



rule "Education"
	dialect "mvel"
//	ruleflow-group "check1"
	when
	$D:Insurance(education=="10th Pass" ||  education=="12th Pass" || education=="Diploma" || education=="Graduate"  
	 ||  education=="Post Graduate" || education=="Post Graduate and Above"	)
	then
	$D.setStatusEducation("Pass")
end

rule "EducationF"
	dialect "mvel"
//	ruleflow-group "check1"
	when
	$D:Insurance(education=="Uneducated" ||  education=="Other" || education=="Illiterate" || education=="Below 10th"  	)
	then
	$D.setStatusEducation("Education Fail")
	
end

rule "Nominee"
	dialect "mvel"
//	ruleflow-group "check1"
	when
	$D:Insurance(nominee=="Father" || nominee=="Husband" || nominee=="Mother" || nominee=="Spouse" || nominee=="Wife" || nominee=="Son" || nominee=="Daughter"
	|| nominee=="Grand Daughter" || nominee=="Grand Son" )
	then
	$D.setStatusNominee("Pass")
end

rule "NomineeF"
	dialect "mvel"
//	ruleflow-group "check1"
	when
	$D:Insurance(nominee=="Other" )
	then
	$D.setStatusNominee("Fail In nominee")
end

rule "Channel"
	dialect "mvel"
//	ruleflow-group "check1"
	when
	$D:Insurance(channel=="BANCA" || channel=="BANCA NORTH and SOUTH" || channel=="Bancassurance"
	|| channel=="Bancassurance-BOB" || channel=="Bancassurance-UBI"  )
	then
	$D.setStatusChannel("Pass")
end

rule "ChannelF"
	dialect "mvel"
//	ruleflow-group "check1"
	when
	$D:Insurance(channel=="NON BANCA" || channel=="BOB" || channel=="Digital" || channel=="ER" || channel=="RRB"  )
	then
	$D.setStatusChannel("Fail in Channel")
end

rule "Occupation"
  dialect "mvel"
//  ruleflow-group "check1"
  when
  	$D:Insurance(occupation=="Salaried Person" || occupation=="Professional" || occupation=="Salesman-Including Counter" || occupation=="Business Owner" 
  	|| occupation=="Student"  || occupation=="Housewife"  )
	then
	$D.setStatusOccupation("Pass")
end

rule "OccupationF"
  dialect "mvel"
//  ruleflow-group "check1"
  when
  	$D:Insurance(occupation=="Other"   )
	then
	$D.setStatusOccupation("Fail In Occupation")
end
*/